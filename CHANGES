v0.9.1503 / Tue Oct 08 2013 21:46:11 +0200 / 91e9d06993f83f6c7c85dc7dea07618ba156ea9b
=====================================================================================

* Audio buffering and fixes for audio module by @alexeypegov
* Moved registering/providing/handling events code to `anm.js`
* Player instances manager, to ease debugging (accessible from `__anm.player_manager`)

Usage:

    var player_manager = __anm.player_manager;
    player_manager.on(C.S_NEW_PLAYER, function(player) {
        // handling new player
    });
    player_manager.on(C.S_PLAYER_DETACH, function(player) {
        // handling detached player
    });
    var my_player_1 = player_manager.getPlayer('my-canvas-1');
    console.log(player_manager.hash);
    console.log(player_manager.instances);



v0.9.1502 / Mon Oct 07 2013 23:24:02 +0200 / 64c27db2a732570a57e59119b3d3f74fae616455
=====================================================================================

Convert Animatron sequential scenes to elements with bands shifted by required amount of time.

Also:

- `go` page improvements
- `favicon` for internal pages



v0.9.1501 / Fri Oct 04 2013 18:35:07 +0200 / 21a949ac105336bde8e65322c9fd0789b5580b72
=====================================================================================

Implemented a remote resource manager (`__anm.resource_manager`), which:

* Allows to subscribe with any number of callbacks to any number of resources and they'll be called when each of these resources was either loaded or failed to load.
* Stores the cache of all requested resources among with waiting and errors queue
* Do not loads any resource with it's own code, just requires a loader function.

Integrated it to `Sheet` class and `audio.js` module.

Also:

* New `RES_LOADING` state for the player
* New `RES_LOAD` event for the player which fires when player started to load resources
* `LOAD` is now fired only when all remote resources (if there were any) were loaded or failed

How to use:

* Get `__anm.resource_manager` instance
* When you need to load a resource, call `.loadOrGet` method of resource manager with:
    * URL of the resource
    * Loader function (it will not be called if resource is already in the cache) which gets `onsuccess` and `onerror` callbacks as arguments and should call them in the corresponding situation (like deferred AJAX call)
    * Callback function which gets the resource value when it was successfully loaded
* To listen for specific resources to complete loading, call `.subscribe` method with array of required URLs and a callback (or array of callbacks) to be called when these resources are loaded or failed to load (or some loaded and some failed)
* If you have a local static resource and some subscriber to it's URL, just call `.trigger` method with URL and it's resource to force resource manager to notify subscribers for this resource. If it failed to load, call `.error` method with URL and error instance



v0.9.15 / Tue Sep 24 2013 23:51:17 +0200 / bcc07e7ef99c3a06ec79ba1817f112777f92e093
===================================================================================

Totally new controls design.

Among with that:

* new player states: `C.LOADING` (while loading a scene) and `C.ERROR` (when error was fired). In addition to the well-known old ones: `C.PLAYING`, `C.PAUSED`, `C.STOPPED` and `C.NOTHING`
* type of the last load target (internal, currently) is stored now: `C.LT_BUILDER`, `C.LT_SCENE`, `C.LT_CLIPS`, `C.LT_URL` and `C.LT_IMPORT`
* `InfoBlock` is completely controlled by `Controls` â€” so, when controls are disabled, there's also will be no info block.
* Now we know how to draw the Animatron Guy (on cached canvas)
* Improved test mocks and tests themselves



v0.9.1405 / Fri Sep 20 2013 00:00:07 +0200 / e9a3fd85b47238c40af794dc88ff398fc6e26270
=====================================================================================

Fixes:

* Swap two importers back, the compact-format importer is now in `animatron.js` bundle and is named `AnimatronImporter` (was in `animatron-publish.js` bundle and was named `AnimatronPublishImporter`), and the full-format importer is `AnimatronIntactImporter` and lays in `animatron-intact.js` bundle. It affects several files, including `go` page.
* Add handling player PAUSE event in audio module



v0.9.1404 / Thu Sep 12 2013 19:12:03 +0200 / 2b6d558f29d9c6328999e880c868a62f97f6fea8
=====================================================================================

Features:

* Support for the init file (anm.js), which configures the namespace, manages the way of player initialization process, prepares and stores some private global configuration.
* X_START and X_STOP events for bands

Fixes:

* Fix incorrect loop in audio module which caused

Fixes for the Compact a.k.a. Publish importer and to the `go` page:

* Supports duration of scenes
* Properly imports bands
* Supports element ID to be the first element of a layer's description array
* Properly tests end-mode for null



v0.9.1403 / Wed Aug 28 2013 12:05:15 -0700 / 84bf790ab3408ec9356d96e972c924be57bd3b56
=====================================================================================

Importer for minimized format is rewritten to support compact (array-based) format

Features:

* Shear/skew tween
* Compact (array-based) format support

Incompatibilities b/w Editor and Player:

Fixed:
* Text size
* Import of Scale and Alpha tweens

Still not fixed:

* Text Underline
* Speed of the Translate tween with a long path
* End modes for clips are not stable, so not fixing
* Importing partial scenes



v0.9.1402 / Wed Aug 14 2013 19:57:00 +0200 / 583039ea2af4a409bd7c06ba373d8ab7a1d7ab59
=====================================================================================

Fixes:

* Supports collapsed data for tweens, imported from Animatron Editor

Features:

* Adds the `animatron-publish` imported and `animatron-publish` bundle, they provide support of new minimized format from Editor



v0.9.1401 / Thu Aug 08 2013 03:29:03 +0200 / 3f2468a1312c1f382d9a79527cfdd858a9858ce5
=====================================================================================

Features:

* Refactored Animatron Importer

Fixes:

* Animatron Importer now properly passes loop mode to the children to fix current difference with editor
* Animatron Importer now correctly applies global bands to groups imported from editor



v0.9.14 / Fri Jul 26 2013 14:18:06 +0200 / 09f66d20225dee4ac861947bb45d61e34dbd25fd
===================================================================================

Features:

* Base state (static state for every element)
* Pivot support

Fixes:

* Sandbox stability
* Rotate-to-path tween when importing from Animatron
* Sevearal more importing fixes
* Rendering numbers for text (by @ahollenbach)



v0.9.13 / Fri Jul 19 2013 14:10:43 +0200 / e9c5025e17afb435481414d5f0435cb430289299
===================================================================================

Features:

* Basic audio support
* Shadows by @alexeypegov

Fixes:

* Calculate internal time for children
* Do not show invisible elements



v0.9.122 / Tue Jul 02 2013 01:19:41 +0200 / 9287bed0629f395268cc8dd98c1fba86d44228fc
====================================================================================

Fixes:

* Snapshot path in 'go' page



v0.9.121 / Tue Jul 02 2013 00:10:29 +0200 / ab040726b8228cb2e0e0a06b7b865cd0bca17057
====================================================================================

Fixes:

* Allows to re-add modifiers that were removed before
* Both old and new 'end' properties for clips, imported from Animatron, now default to C.ONCE instead of C.STAY



v0.9.12 / Mon May 27 11:00:59 2013 -0700 / 024740e3c19ac8566e44a0fd2131b6291ce1d93a
===================================================================================

* Versioning with Jake

Last PR #93: "Versioning"



v0.9.11 / Mon May 27 19:06:52 2013 +0200 / ac0e027ac95666dbb5ec4e90990ecebd4f421744
===================================================================================

This version includes almost complete implementation of versioning, but is required to be done before v0.9.12, to test versions mechanics before merging.



v0.9.1 / Mon May 20 23:24:52 2013 +0200 / 216a5f011e05fb83e3517a4dade022f1d9739a0a
==================================================================================

Includes:

* Improvements on Repeat modes like `once`/`stay`/`loop`/`bounce` (allow to restict last two with concrete number of times), it mostly came from Animatron Tool
* Totally new design for the controls
* Fix Pixel-ratio tests
* Show last frame when stopped playing in preview and video modes
* Major fixes regarding retina
* Fix scaling when scene aspect ratio equals to player aspect ratio
* Scaling scene to a size of player
* Improving sprites (a new code introduced)
* Tool compatibility
* Fixes scene and element duration issues with importing scenes from the tool
* Proper Calculation of Scene Duration + Element has Infinite Band by Default
* Generate Docs from Markdown files
* Sandbox improvements
* Building with Jake and Bundles

Last PR #92: "STAY is default mode for importing from Animatron"



v0.9 / Sun Mar 3 17:10:17 2013 -0800 / 5f9f4149a372ac4b16236880c3da795db98f2098
===============================================================================

Includes:
* Modifiers are back to normal and relative modifiers are now the optional part, though fully implemented and usable
* Relative tweens are also supported
* Improved tests automation (it is ok to run them from console now)
* Several fixes
* Image caching from @Nek

Still:
* Trigger-modifiers are still not very guaranteed to be called, especially in the end of the band

Last PR #72: "Tests Automation"



v0.246b / Fri Nov 2 14:56:17 2012 -0700 / bed582ae4ad3956a08f40af6f3dd79b73cb3b792
==================================================================================

**Major** change is that ALL types of the modifiers now receive _relative time_.

The another **major** change is that _tweens_ are TOTALLY identical to _band-restricted modifiers_ now, they just have predefined functions.

This version will **BREAK** most of the code used with previous versions. The version just before these changes has `v0.245` tag, so it is safe to switch to it and your code will work properly, but w

So, developers who use the engine should change their code accordingly, and I recommend to do it in a separate branch, use `v0.245` and `v0.246b` tags to checkout and switch versions of player.

Some new aggressive errors may appear while using new code, please report it to me, by e-mail or through issues, I'll try to fix them asap.

Final `v0.246` version will fix `AnimatronImporter`, new-found bugs and include docs. If you feel unsafe, you may wait to the final `v0.246` version which should fix bugs unrelated to animations and those

* tweens now act as a band-restricted modifiers, so they get value of `0` before their band wasn't started and value of `1` after their band; please keep that in mind when you use overlapping modifiers or
* simple modifiers now take time `t` in range of `0..1`, second argument is `duration`, so to get the actual value you should use `t * duration`; `data` is the _third_ argument now.
* default band for any empty element is back to `0..10`, before it was `0..MAX_INT` â€” it was changed back since all modifiers now get `0..1` of `t` and in previous version empty elements got the very smal
* state is now totally clean in modifiers when it comes inside on new frame, so code like `this.x += 5` will not work (and failed to work before, but it is another story), please use previous state that i

Modifiers types:

* `b().modify(function(t, [duration[, data]]) { ... })` â€” now modifier takes `t` in range `0..1`, and takes `duration`, which is duration of the element band (same to `this.$.duration()`).
* `b().modify([x, y], function(t, [duration[, data]]) { ... })`, will call a modifier through the inner band, getting _value from `0..1`_ in the duration of the band `[x, y]`, like tweens. It is important
* `b().modify(my_t, function(t, [duration[, data]]) { ... })` will call a modifier at `my_t` time or a bit later, if framerate is low, and will get actual time when it was called. `my_t` is like a band-ti

See example from [Previous PR#53](https://github.com/Animatron/player/pull/56) to get vision of new types of modifiers.

Other changes:

* Tweens are equal to band-modifiers, their functions are also changed accordingly
* Default band for empty element is now `0..10`
* It is now possible to pass easing for any modifier (I should also mention it in docs)
* Element state is now cleared on every frame (previously it was cloned and passed to new-frame modifiers)
* `scene.duration` and elements' bands calculation fixes, default band for the element is now [0, 10]
* More bands, scene & element duration tests, so they should work more polished
* Partly refactored errors to be collected in a single object

`v0.247` is planned to include relative-modifiers, so:

    b().band([0, 5]).modify([2.5, 4], function(t) { ... })
    b().band([0, 5]).rmodify([1/2, 4/5], function(t) { ... })

will be equal, and the same with triggers:

    b().band([0, 5]).modify(2.5, function(t) { ... })
    b().band([0, 5]).rmodify(1/2, function(t) { ... })

Last PR #57: "Time is relative in all of the modifiers. Tweens are now totally identical to band-restricted modifiers"



v0.245 / Mon Oct 29 01:42:46 2012 -0700 / 92c53a52632d70d14cbe6ee4d1ffae867b3a214f
==================================================================================

Transitional version. Introduces time-restricted modifiers, but their abilities differ alot, and it will be fixed in next versions.

+ `b().modify(function(t) { ... })`, acts like before
+ `b().modify([x, y], function(t) { ... })`, will call a modifier through the inner band, getting _value from `0..1`_ in the duration of the band `[x, y]`, like tweens. It is important to note that it wil
+ `b().modify(my_t, function(t) { ... })` will call a modifier at `my_t` time or a bit later, if framerate is low, and will get actual time when it was called. both `my_t` and `t` are relative to a band o

Also includes these inner things:

+ `stopAfter` argument for play to stop when played given amount of seconds
+ smart time-decisions for exact-time modifiers
+ timer-emulator for tests
+ play-and-wait-for-something-happen helper for tests
+ better grouping of painters and modifiers
* removed preview for modes other than C.M_VIDEO mode

Last PR #56: "Time is relative in all of the modifiers. Tweens are now totally identical to band-restricted modifiers"



v0.24 / Mon Oct 1 04:26:08 2012 -0700 / c95d1e30d2d73f75ec70b6add04609700fcf7137
================================================================================

Includes:

+ masks support, with fixes
+ callbacks to drawAt method, and every-frame callback
+ load scene from url
+ customizing player with url
+ retina support (mouse events sometimes produce incorrect positions)
+ unmodify/unpaint improved
+ tests
* fix arrow keys
* fix enabling/disabling elements in chains
* fixes for loading options from attributes/configuration object

Last PR: #55 "Retina support: Final touches"



v0.23 / Fri Sep 7 07:00:11 2012 -0700 / 0752b5ea0d86d5989e0546a6270c3f41726a4579
================================================================================

"A callback to call after every frame + some nice playing cycle/drawAt tests"

+ collisions module and all that stuff related to it: intersections/contains test
+ two-states mode (previous/current) for rendering, gives a lot of advantages for collisions and animations at all
+ data() method to store data within elements
+ iteration over child elements: each()/deach()
+ caching already wrapped elements in Builder -> faster access from modifiers
+ infinite bands
+ live adding/removing elements to/from scene
+ live adding/removing modifiers to/from elements
+ priorities from modifiers and painters
+ started tests
+ force focus on canvas if player is in dynamic mode
+ TeamCity integration
+ at() method to call a modifier at some concrete time
+ clear() method to clear the element
* elements-cloning fixes
* fix alpha tween
* fix circle shape
* fix player representation in all cases
* fix all of problems with playing appeared while developing previous versions
* fix __stopAnim callback to stop drawing once and only the corresponding rendering cycle



v0.22-patched / Wed May 23 16:53:32 2012 +0400 / 59e238c011a916e7b7d119c370fcda27810053c6
=========================================================================================

patch for v0.22



v0.22 / Tue May 22 13:22:48 2012 +0400 / a8dd55e126c3f8f7f3efa626fe376e483f05afa3
=================================================================================

* fix alpha encoding for FF



v0.21 / Tue Apr 10 18:47:08 2012 +0300 / 64b58e1d4e2f081358d7faaa50559fd3876c7215
=================================================================================

zoom in options + fix accidentally changed order of tweens applying


